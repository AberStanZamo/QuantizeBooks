# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum EnumExpenseBusinessEntity {
  FoxRunDelivery
  HybridInnovations
  Quantize
}

type Expense {
  amount: Float
  approval: DateTime
  approver: User
  businessEntity: EnumExpenseBusinessEntity
  createdAt: DateTime!
  id: String!
  notes: String
  paid: DateTime
  purchaseDate: DateTime
  requester: User
  title: String
  updatedAt: DateTime!
}

input ExpenseCreateInput {
  amount: Float
  approval: DateTime
  approver: UserWhereUniqueInput
  businessEntity: EnumExpenseBusinessEntity
  notes: String
  paid: DateTime
  purchaseDate: DateTime
  requester: UserWhereUniqueInput
  title: String
}

input ExpenseCreateNestedManyWithoutUsersInput {
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseListRelationFilter {
  every: ExpenseWhereInput
  none: ExpenseWhereInput
  some: ExpenseWhereInput
}

input ExpenseOrderByInput {
  amount: SortOrder
  approval: SortOrder
  approverId: SortOrder
  businessEntity: SortOrder
  createdAt: SortOrder
  id: SortOrder
  notes: SortOrder
  paid: SortOrder
  purchaseDate: SortOrder
  requesterId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ExpenseUpdateInput {
  amount: Float
  approval: DateTime
  approver: UserWhereUniqueInput
  businessEntity: EnumExpenseBusinessEntity
  notes: String
  paid: DateTime
  purchaseDate: DateTime
  requester: UserWhereUniqueInput
  title: String
}

input ExpenseUpdateManyWithoutUsersInput {
  connect: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
}

input ExpenseWhereInput {
  amount: FloatNullableFilter
  approval: DateTimeNullableFilter
  approver: UserWhereUniqueInput
  businessEntity: EnumExpenseBusinessEntity
  id: StringFilter
  notes: StringNullableFilter
  paid: DateTimeNullableFilter
  purchaseDate: DateTimeNullableFilter
  requester: UserWhereUniqueInput
  title: StringNullableFilter
}

input ExpenseWhereUniqueInput {
  id: String!
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createExpense(data: ExpenseCreateInput!): Expense!
  createUser(data: UserCreateInput!): User!
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _expensesMeta(orderBy: [ExpenseOrderByInput!], skip: Float, take: Float, where: ExpenseWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  expense(where: ExpenseWhereUniqueInput!): Expense
  expenses(orderBy: [ExpenseOrderByInput!], skip: Float, take: Float, where: ExpenseWhereInput): [Expense!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  approvedExpenses(orderBy: [ExpenseOrderByInput!], skip: Float, take: Float, where: ExpenseWhereInput): [Expense!]!
  createdAt: DateTime!
  expenses(orderBy: [ExpenseOrderByInput!], skip: Float, take: Float, where: ExpenseWhereInput): [Expense!]!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  approvedExpenses: ExpenseCreateNestedManyWithoutUsersInput
  expenses: ExpenseCreateNestedManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  approvedExpenses: ExpenseUpdateManyWithoutUsersInput
  expenses: ExpenseUpdateManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  approvedExpenses: ExpenseListRelationFilter
  expenses: ExpenseListRelationFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
